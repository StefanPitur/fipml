type mlist =
| Nil
| Cons of int @ shared * mlist @ unique

fip fun update_mlist (xs : mlist @ unique) (v : int @ shared) : mlist @ 'u = {
  match xs with
  | Nil -> { Nil }
  | Cons (_, tl) -> { Cons (v, tl) }
  endmatch
}

{
  let xs = Cons (1, Nil) in
  let result = update_mlist! (xs, 42) in
  match result with
  | Nil -> { 0 }
  | Cons (v, _) -> { v }
  endmatch
}
