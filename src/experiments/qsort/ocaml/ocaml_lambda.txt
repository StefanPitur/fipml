(seq
  (letrec
    (quicksort/288 (function xs/296 (apply quicksort_go/289 xs/296 0))
      quicksort_go/289
        (function xs/297 b/298
          (if (isint xs/297) (apply quicksort_app/290 b/298)
            (let
              (*match*/392 =
                 (apply split_list/291 (field 0 xs/297) (field 1 xs/297) 0
                   b/298 [0: 0 0]))
              (apply quicksort_go/289 (field 0 *match*/392)
                (field 1 *match*/392)))))
      quicksort_app/290
        (function bdl/303
          (switch* bdl/303
           case int 0: 0
           case tag 0:
            (let (bdl'/307 =a (field 1 bdl/303) xs/306 =a (field 0 bdl/303))
              (switch* xs/306
               case tag 0:
                (let
                  (*match*/396 =
                     (apply split_sublist/292 (field 0 xs/306)
                       (field 1 xs/306) 0 bdl'/307 [0: 0 0] [0: 0 0]))
                  (apply quicksort_go/289 (field 0 *match*/396)
                    (field 1 *match*/396)))
               case tag 1:
                (let (b/311 =a (field 1 xs/306) a/310 =a (field 0 xs/306))
                  (if (<= a/310 b/311)
                    (makeblock 0 (int,*) a/310
                      (makeblock 0 (int,*) b/311
                        (apply quicksort_app/290 bdl'/307)))
                    (makeblock 0 (int,*) b/311
                      (makeblock 0 (int,*) a/310
                        (apply quicksort_app/290 bdl'/307)))))))
           case tag 1:
            (makeblock 0 (int,*) (field 0 bdl/303)
              (apply quicksort_app/290 (field 1 bdl/303)))))
      split_list/291
        (function p/314[int] xs/315 k/316 b/317 u/318
          (if (isint xs/315)
            (let (*match*/400 = (apply split_app1/293 k/316 0 0 b/317))
              (makeblock 0 (field 0 *match*/400)
                (makeblock 1 (int,*) p/314 (field 1 *match*/400))))
            (let (xx/320 =a (field 1 xs/315) x/319 =a (field 0 xs/315))
              (if (< x/319 p/314)
                (apply split_list/291 p/314 xx/320
                  (makeblock 0 (int,*) x/319 k/316) b/317 u/318)
                (apply split_list/291 p/314 xx/320
                  (makeblock 1 (int,*) x/319 k/316) b/317 u/318)))))
      split_sublist/292
        (function p/323[int] xs/324 k/325 b/326 u/327 u1/328
          (switch* xs/324
           case tag 0:
            (let (xx/330 =a (field 1 xs/324) x/329 =a (field 0 xs/324))
              (if (< x/329 p/323)
                (apply split_sublist/292 p/323 xx/330
                  (makeblock 0 (int,*) x/329 k/325) b/326 u/327 u1/328)
                (apply split_sublist/292 p/323 xx/330
                  (makeblock 1 (int,*) x/329 k/325) b/326 u/327 u1/328)))
           case tag 1:
            (apply split_list/291 p/323
              (makeblock 0 (int,*) (field 0 xs/324)
                (makeblock 0 (int,*) (field 1 xs/324) 0))
              k/325 b/326 u/327)))
      split_app1/293
        (function k/333 lo/334 hi/335 b/336
          (switch* k/333
           case int 0:
            (if (isint hi/335) (makeblock 0 lo/334 b/336)
              (makeblock 0 lo/334
                (makeblock 1 (int,*) (field 0 hi/335) b/336)))
           case tag 0:
            (apply split_app1/293 (field 1 k/333)
              (makeblock 0 (int,*) (field 0 k/333) lo/334) hi/335 b/336)
           case tag 1:
            (let (k/340 =a (field 1 k/333) x/339 =a (field 0 k/333))
              (if (isint hi/335)
                (apply split_app1/293 k/340 lo/334
                  (makeblock 0 (int,int) x/339 0) b/336)
                (apply split_app2/294 k/340 lo/334
                  (makeblock 1 (int,int) (field 0 hi/335) x/339) b/336
                  [0: 0 0])))))
      split_app2/294
        (function k/343 lo/344 hi/345 b/346 u/347
          (switch* k/343
           case int 0: (makeblock 0 lo/344 (makeblock 0 hi/345 b/346))
           case tag 0:
            (apply split_app2/294 (field 1 k/343)
              (makeblock 0 (int,*) (field 0 k/343) lo/344) hi/345 b/346
              u/347)
           case tag 1:
            (apply split_app2/294 (field 1 k/343) lo/344
              (makeblock 0 (int,*) (field 0 k/343) hi/345) b/346 u/347)))
      rand_list/295
        (function n/352[int]
          (if (> n/352 0)
            (let
              (pred_n/353 =[int] (- n/352 1)
               rand_list_res/354 = (apply rand_list/295 pred_n/353))
              (makeblock 0 (int,*) n/352 rand_list_res/354))
            0)))
    (seq (setfield_ptr(root-init) 0 (global Qsort!) quicksort/288)
      (setfield_ptr(root-init) 1 (global Qsort!) quicksort_go/289)
      (setfield_ptr(root-init) 2 (global Qsort!) quicksort_app/290)
      (setfield_ptr(root-init) 3 (global Qsort!) split_list/291)
      (setfield_ptr(root-init) 4 (global Qsort!) split_sublist/292)
      (setfield_ptr(root-init) 5 (global Qsort!) split_app1/293)
      (setfield_ptr(root-init) 6 (global Qsort!) split_app2/294)
      (setfield_ptr(root-init) 7 (global Qsort!) rand_list/295)))
  (let
    (first_element/355 =
       (function xs/357 d/358[int] : int
         (if (isint xs/357) d/358 (field 0 xs/357))))
    (setfield_ptr(root-init) 8 (global Qsort!) first_element/355))
  (letrec
    (test_iter/360
       (function n/361[int] iter/362[int] : int
         (if (== iter/362 0) 0
           (let
             (xs/363 = (apply (field 7 (global Qsort!)) n/361)
              ys/364 = (apply (field 0 (global Qsort!)) xs/363)
              first_element_ys/365 =[int]
                (apply (field 8 (global Qsort!)) ys/364 0)
              pred_iter/366 =[int] (- iter/362 1))
             (+ first_element_ys/365
               (apply test_iter/360 n/361 pred_iter/366))))))
    (setfield_ptr(root-init) 9 (global Qsort!) test_iter/360))
  (let
    (test/367 =
       (function n/369[int] rounds/370[int] : int
         (apply (field 9 (global Qsort!)) n/369 rounds/370)))
    (setfield_ptr(root-init) 10 (global Qsort!) test/367))
  (apply (field 43 (global Stdlib!))
    (apply (field 10 (global Qsort!)) 10000 100))
  0 0)