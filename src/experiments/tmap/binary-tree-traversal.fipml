type 'a tree =
| Bin of 'a tree @ unique * 'a tree @ unique
| Tip of 'a

type ('a, 'b) tzipper =
| Top
| BinL of ('a, 'b) tzipper * 'a tree
| BinR of 'b tree * ('a, 'b) tzipper

fip fun down (t : 'a tree) ^(f : ('a -> 'b)) (ctx : ('a, 'b) tzipper) : 'b tree = {
  match t with
  | Bin (l, r) -> { down (l, f, BinL (ctx, r)) }
  | Tip(x) -> { 
      let fx = ^f (x) in
      app (Tip(fx), f, ctx)
    }
  endmatch
}

and fip fun app (t : 'b tree) ^(f : ('a -> 'b)) (ctx : ('a, 'b) tzipper) : 'b tree = {
  match ctx with
  | Top -> { t }
  | BinR (l, up) -> { app (Bin(l, t), f, up) }
  | BinL (up, r) -> { down (r, f, BinR(t, up)) }
  endmatch
}

fip fun tmap (t : 'a tree) ^(f : ('a -> 'b)) : 'b tree = {
  down (t, f, Top)
}
