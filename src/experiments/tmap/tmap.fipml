type ('t @ @ ) tree =
| Bin of ('t ; ; ) tree @ unique * ('t ; ; ) tree @ unique
| Tip of 't @ unique

type ('s, 't @ @ ) tzipper =
| Top
| BinL of ('s, 't ; ; ) tzipper @ unique * ('s ; ; ) tree @ unique
| BinR of ('t ; ; ) tree @ unique * ('s, 't ; ; ) tzipper @ unique

fip fun down (t : ('s ; ; ) tree @ unique) ^(f : ('s @ 'us -> 't @ 'ut) @ 'u1) (ctx : ('s, 't ; ; ) tzipper @ unique) : ('t ; ; ) tree @ 'u2 = {
  match t with
  | Bin (l, r) -> { down (l, f, BinL (ctx, r)) }
  | Tip(x) -> { 
      let fx = ^f (x) in
      app (Tip(fx), f, ctx)
    }
  endmatch
}

and fip fun app (t : ('s ; ; ) tree @ unique) ^(f : ('s @ 'us -> 't @ 'ut) @ 'u1) (ctx : ('s, 't ; ; ) tzipper @ unique) : ('t ; ; ) tree @ 'u2 = {
  match ctx with
  | Top -> { t }
  | BinR (l, up) -> { app (Bin(l, t), f, up) }
  | BinL (up, r) -> { down (r, f, BinR(t, up)) }
  endmatch
}

fip fun tmap (t : ('s ; ; ) tree @ unique) ^(f : ('s @ 'us -> 't @ 'ut) @ 'u1) : ('t ; ; ) tree @ 'u2 = {
  down (t, f, Top)
}

fun negate (n : int @ 'u) : int @ 'u2 = { -n }

fun create_int_tree (level : int @ 'u1) : (int ; ; ) tree @ 'u = {
  if level == 1 then { Tip (1) } else {
    let pred_level = level - 1 in
    let res_l = create_int_tree (pred_level) in
    let res_r = create_int_tree (pred_level) in
    Bin (res_l, res_r) 
  }
  endif
} 

fbip fun fold_sum (t : (int ; ; ) tree @ unique) : int @ 'u = {
  match t with
  | Tip (x) -> { free 1; x }
  | Bin (l, r) -> {
      free 2;
      let res_l = fold_sum (l) in
      let res_r = fold_sum (r) in
      res_l + res_r
    }
  endmatch
}

{
  let t = create_int_tree (30) in
  let t2 = tmap (t, negate) in
  fold_sum (t2)
}
