open Parser

let pprint_lexer_token ppf token = 
  Fmt.pf ppf "%s" (
    match token with
      | INT i -> Fmt.str "INT: %d@." i
      | LID lid -> Fmt.str "LID: %s@." lid
      | UID uid -> Fmt.str "UID: %s@." uid
      | LPAREN -> "("
      | RPAREN -> ")"
      | COMMA -> ","
      | COLON -> ":"
      | SEMICOLON -> ";"
      | ADD -> "+"
      | SUB -> "-"
      | MUL -> "*"
      | DIV -> "/"
      | MOD -> "%%"
      | NOT -> "!"
      | BORROWED -> "^"
      | ASSIGN -> "="
      | LT -> "<"
      | GT -> ">"
      | BAR -> "|"
      | UNDERSCORE -> "_"
      | LEQ -> "<="
      | GEQ -> ">="
      | EQ -> "=="
      | NEQ -> "!="
      | AND -> "&&"
      | OR -> "||"
      | ARROW -> "->"
      | UNIT -> "()"
      | OF -> "of"
      | FST -> "fst"
      | SND -> "snd"
      | IF -> "if"
      | THEN -> "then"
      | ELSE -> "else"
      | ENDIF -> "endif"
      | TRUE -> "true"
      | FALSE -> "false"
      | LET -> "let"
      | REC -> "rec"
      | FUN -> "fun"
      | IN -> "in"
      | BEGIN -> "begin"
      | END -> "end"
      | TYPE -> "type"
      | MATCH -> "match"
      | DMATCH -> "match!"
      | ENDMATCH -> "endmatch"
      | WITH -> "with"
      | SOME -> "Some"
      | NONE -> "None"
      | EOF -> "eof"
      | TYPE_INT -> "int"
      | TYPE_BOOL -> "bool"
      | TYPE_UNIT -> "unit"
      | TYPE_OPTION -> "option"

  )
  (* match token with
  | INT i -> pprint_token (Fmt.str "INT: %d@." i)
  | LID lid -> pprint_token (Fmt.str "LID: %s@." lid)
  | UID uid -> pprint_token (Fmt.str "UID: %s@." uid)
  | LPAREN -> pprint_token "("
  | RPAREN -> pprint_token ")"
  | COMMA -> pprint_token ","
  | COLON -> pprint_token ":"
  | SEMICOLON -> pprint_token ";"
  | ADD -> pprint_token "+"
  | SUB -> pprint_token "-"
  | MUL -> pprint_token "*"
  | DIV -> pprint_token "/"
  | MOD -> pprint_token "%%"
  | NOT -> pprint_token "!"
  | BORROWED -> pprint_token "^"
  | ASSIGN -> pprint_token "="
  | LT -> pprint_token "<"
  | GT -> pprint_token ">"
  | BAR -> pprint_token "|"
  | UNDERSCORE -> pprint_token "_"
  | LEQ -> pprint_token "<="
  | GEQ -> pprint_token ">="
  | EQ -> pprint_token "=="
  | NEQ -> pprint_token "!="
  | AND -> pprint_token "&&"
  | OR -> pprint_token "||"
  | ARROW -> pprint_token "->"
  | UNIT -> pprint_token "()"
  | OF -> pprint_token "of"
  | FST -> pprint_token "fst"
  | SND -> pprint_token "snd"
  | IF -> pprint_token "if"
  | THEN -> pprint_token "then"
  | ELSE -> pprint_token "else"
  | ENDIF -> pprint_token "endif"
  | TRUE -> pprint_token "true"
  | FALSE -> pprint_token "false"
  | LET -> pprint_token "let"
  | REC -> pprint_token "rec"
  | FUN -> pprint_token "fun"
  | IN -> pprint_token "in"
  | BEGIN -> pprint_token "begin"
  | END -> pprint_token "end"
  | TYPE -> pprint_token "type"
  | MATCH -> pprint_token "match"
  | DMATCH -> pprint_token "match!"
  | ENDMATCH -> pprint_token "endmatch"
  | WITH -> pprint_token "with"
  | SOME -> pprint_token "Some"
  | NONE -> pprint_token "None"
  | EOF -> pprint_token "eof"
  | TYPE_INT -> pprint_token "int"
  | TYPE_BOOL -> pprint_token "bool"
  | TYPE_UNIT -> pprint_token "unit"
  | TYPE_OPTION -> pprint_token "option" *)
