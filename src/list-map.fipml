type mylist =
| Cons of int @ shared * mylist @ unique
| Nil

fip fun succ (x : int @ shared) : int @ 'u = {
  x + 10
}

fip fun map_fn (xs : mylist @ unique) ^(f : (int @ shared -> int @ shared) @ 'u) : mylist @ 'u1 = {
  match xs with
  | Cons (x, xxs) -> { let fx = ^f (x) in let fxs = map_fn (xxs, f) in Cons (fx, fxs) }
  | Nil -> { Nil }
  endmatch
}

{
  let xs = Cons (1, Cons (2, Cons (3, Nil))) in
  let new_xs = map_fn! (xs, succ) in
  match new_xs with
  | Nil -> { 0 }
  | Cons (x, _) -> { x }
  endmatch
}
