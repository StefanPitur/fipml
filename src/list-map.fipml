type ( @ 'u @ ) list =
| Cons of int @ 'u * (;'u;) list @ unique
| Nil

fip fun add_1 (x : int @ 'u1) : int @ 'u2 = {
  x + 1
}

fip fun map_fn (xs : (;'u1;) list @ unique) ^(f : (int @ 'u1 -> int @ 'u2) @ 'u3) : (;'u5;) list @ 'u4 = {
  match xs with
  | Cons (x, xxs) -> { let fx = ^f (x) in let fxs = map_fn (xxs, f) in Cons (fx, fxs) }
  | Nil -> { Nil }
  endmatch
}

{
  let xs = Cons (1, Cons (2, Cons (3, Nil))) in
  map_fn (xs, add_1)
}